{"version":3,"sources":["renderPageUtils.js","views/Navbar.js","endpointUtils.js","views/Login.js","displayUtils.js","views/HangmanLobby.js","views/Game.js","views/Profile.js","views/Register.js","views/Landing.js","views/Games.js","App.js","index.js"],"names":["renderHangmanLobbyPage","history","push","renderHangmanGamePage","hangmanGame","pathname","state","data","renderGamesPage","withRouter","props","localStorage","getItem","style","margin","fontSize","align","span","onClick","offset","renderProfilePage","setItem","renderLandingPage","logout","registerEndpoint","loginEndpoint","hangmanEndpoint","finishedHangmanGamesEndpoint","getUsersHangmanPointsEndpoint","userInformationEndpoint","getGameEndpoint","game_id","login","username","password","credentials","Promise","resolve","reject","axios","post","then","response","access","message","success","catch","error","status","getConfig","accessToken","headers","guessHangmanLetter","letter","getGuessLetterEndpoint","err","console","log","Error","errMessage","useState","setErrMessage","name","className","initialValues","remember","onFinish","values","Item","rules","required","prefix","UserOutlined","placeholder","LockOutlined","type","valuePropName","noStyle","htmlType","switch","alphabet","split","displayGameID","displayWordAttempt","word_attempt","map","val","join","displayOutcomeMessage","includes","Option","Select","HangmanLobby","hangmanPoints","setPoints","currentGames","setCurrentGames","pastGames","setPastGames","difficultyLevel","setDifficultyLevel","useEffect","get","deleteGame","delete","deleteHangmanGame","filter","textAlign","padding","border","borderRadius","itemLayout","dataSource","renderItem","item","actions","Meta","title","description","wrong_moves","showSearch","width","optionFilterProp","onChange","value","filterOption","input","option","children","toLowerCase","indexOf","difficulty_level","createHangmanGame","word","Game","location","setData","guess","setGuess","available","guessedLetters","li","el","availableLetters","guessed_letters","finished","gutter","index","marginTop","subTitle","extra","key","Profile","res","register","hasFeedback","dependencies","getFieldValue","validator","rule","Landing","loginShowing","setLoginShowing","switchView","link","Games","setUsername","games","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.898f4fd6.chunk.js","sourcesContent":["export const landingRoute = '/'\nexport const gamesRoute = '/games'\nexport const hangmanLobbyRoute = '/hangmanLobby'\nexport const hangmanGameRoute = '/game'\nexport const profileRoute = '/profile'\n\n/**\n * Pushes the profile route on the history stack,\n * thereby rendering the profile page.\n * @param {history} history\n * @return {void} \n */\nexport const renderProfilePage = (history) => {\n    history.push(profileRoute)\n}\n\n/**\n * Pushes the hangman lobby route on the history stack,\n * thereby rendering the hangman lobby page.\n * @param {history} history\n * @return {void} \n */\nexport const renderHangmanLobbyPage = (history) => {\n    history.push(hangmanLobbyRoute)\n}\n\n/**\n * Pushes the hangman game route on the history stack,\n * thereby rendering the hangman game page.\n * @param {history} history\n * @param {HangmanGame} hangmanGame\n * @return {void} \n */\nexport const renderHangmanGamePage = (history, hangmanGame) => {\n    history.push({\n        pathname: hangmanGameRoute,\n        state: {\n            data: hangmanGame\n        }\n    })\n}\n\n/**\n * Pushes the games route on the history stack,\n * thereby rendering the games page.\n * @param {history} history\n * @return {void} \n */\nexport const renderGamesPage = (history) => {\n    history.push(gamesRoute)\n}\n\n/**\n * Pushes the landing route on the history stack,\n * thereby rendering the landing page.\n * @param {history} history\n * @return {void} \n */\nexport const renderLandingPage = (history) => {\n    history.push(landingRoute)\n}\n\n/**\n * Pushes the landing route on the history stack,\n * thereby rendering the landing page. It also deletes\n * the access token from local storage.\n * @param {history} history\n * @return {void} \n */\nexport const logout = (history) => {\n    localStorage.setItem('accessToken', '')\n    renderLandingPage(history)\n}","import React from 'react'\nimport { withRouter } from 'react-router-dom';\n\nimport {Row, Col} from 'antd'\n\nimport { renderGamesPage, renderProfilePage,\n        logout } from '../renderPageUtils'\n\nfunction Navbar(props) {\n\n    const isLoggedIn = () => {\n        if (localStorage.getItem('accessToken') === '') {\n            return false\n        } else {\n            return true\n        }\n    }\n    \n    const history = props.history\n        if (isLoggedIn()) {\n            return (\n                <div style = {{\n                    margin: '1rem',\n                    fontSize: '15px'\n                    }}>\n                    <Row align='middle'>\n      <Col span={8}><a onClick = {() => renderGamesPage(history)}>Games</a></Col>\n      <Col span={2} offset={12}><a onClick = {() => renderProfilePage(history)} >Profile</a></Col>\n      <Col span={2}>\n      <a onClick = {() => logout(history)} >Logout</a>\n      </Col>\n    </Row>\n                \n                \n            </div>\n            )\n        }\n        else \n        return (\n            <div>\n            </div>\n        )\n    }\nexport default withRouter(Navbar)","import axios from 'axios'\n\nimport { message } from 'antd'\n\nimport { renderGamesPage, renderHangmanGamePage } from './renderPageUtils'\n\nconst serverEndpoint = 'http://127.0.0.1:8000/'\nexport const registerEndpoint = `${serverEndpoint}auth/users/`\nexport const loginEndpoint = `${serverEndpoint}auth/jwt/create/`\nexport const hangmanEndpoint = `${serverEndpoint}hangman/`\nexport const finishedHangmanGamesEndpoint = `${hangmanEndpoint}getFinished/`\nexport const getUsersHangmanPointsEndpoint = `${hangmanEndpoint}getPoints/`\nexport const userInformationEndpoint = `${serverEndpoint}auth/users/me/`\n\n/**\n * Returns the endpoint to a particular hangman game.\n * @param {number} game_id\n * @return {string} \n */\nconst getGameEndpoint = (game_id) => {\n    return `${hangmanEndpoint}${game_id}/`\n}\n\n/**\n * Returns the endpoint to guess a letter for\n * a particular hangman game.\n * @param {number} game_id\n * @return {string} \n */\nconst getGuessLetterEndpoint = (game_id) => {\n    return `${getGameEndpoint(game_id)}/guessLetter/`\n}\n\n/**\n * Sends a post request to the register endpoint. Returns\n * a promsie of the post request. The promise resolves to\n * an error message if one is received.\n * @param {string} username\n * @param {string} password\n * @return {Promise} \n */\nexport const register = (username, password) => {\n    const credentials = {\n        username: username,\n        password: password\n    }\n    return new Promise((resolve, reject) => {axios.post(registerEndpoint, credentials).then(res => resolve(''))\n        .catch(error => {\n            if (error.response.status === 400) {\n                return resolve('User already exists.')\n            } else {\n                return resolve('')\n            }\n        })})\n}\n\n/**\n * Sends a post request to the login endpoint. Returns\n * a promsie of the post request. The promise resolves to\n * an error message if one is received. If the post request\n * succeeds, the games page is rendered.\n * @param {history} history\n * @param {string} username\n * @param {string} password\n * @return {Promise} \n */\nexport const login = (history, username, password) => {\n    const credentials = {\n        username: username,\n        password: password\n    }\n    return new Promise((resolve, reject) => {axios.post(loginEndpoint, credentials).then(response => {\n        localStorage.setItem('accessToken', response.data.access)\n        localStorage.setItem('isLoggedIn', true)\n        renderGamesPage(history)\n        message.success('Successfully logged in!')\n        return resolve('')\n    }).catch(error => {\n        if (error.response.status === 401) {\n            return resolve('User does not exist.')\n        } else {\n            return resolve('')\n        }\n    })})\n}\n\n/**\n * Gets the access token from local storage and creates\n * an authorization header.\n * @return {header} \n */\nconst getConfig = () => {\n    const accessToken = localStorage.getItem('accessToken')\n    return {\n        headers: {\n            'Authorization': `JWT ${accessToken}`\n        }\n    }\n}\n\n/**\n * Sends a delete request to delete the object with the\n * inputted game_id\n * @param {string} game_id\n * @return {void} \n */\nexport const deleteHangmanGame = (game_id) => {\n    axios.delete(getGameEndpoint(game_id), getConfig()).catch(err => console.log(err))\n}\n\n/**\n * Sends a get request to get a list of all\n * hangman games associated with the requesting user.\n * Returns a promise of this request that resolves\n * to the data of the response (a list of Hangman Games).\n * @return {Promise} \n */\nexport const getUnfinishedHangmanGames = () => {\n    return new Promise((resolve, reject) => {(axios.get(hangmanEndpoint, getConfig()).then(response => {\n        return resolve(response.data)\n    }).catch(error => console.log(error)))})\n}\n\n/**\n * Sends a get request to get a list of all\n * hangman games that are finished associated\n * with the requesting user.\n * Returns a promise of this request that resolves\n * to the data of the response (a list of Hangman Games).\n * @return {Promise} \n */\nexport const getFinishedHangmanGames = () => {\n    return new Promise((resolve, reject) => {(axios.get(finishedHangmanGamesEndpoint, getConfig()).then(response => {\n        return resolve(response.data)\n        }).catch(error => console.log(error)))})\n}\n\n/**\n * Sends a get request to get the total\n * points a user has achieved from playing hangman.\n * Returns a promise of this request that resolves\n * to the data of the response (the number of points).\n * @return {Promise} \n */\nexport const getUsersHangmanPoints = () => {\n    return new Promise((resolve, reject) => {(axios.get(getUsersHangmanPointsEndpoint, getConfig()).then(response => {\n        return resolve(response.data)\n    }).catch(error => console.log(error)))})\n}\n\n/**\n * Sends a post request to create a\n * hangman game. If the request succeeds,\n * the page for that hangman game is rendered.\n * @param {history} history\n * @param {number} difficultyLevel\n * @return {void} \n */\nexport const createHangmanGame = (history, difficultyLevel) => {\n    axios.post(hangmanEndpoint, {\n        difficulty_level: difficultyLevel\n    }, getConfig()).then(response => {\n        renderHangmanGamePage(history, response.data)\n    }).catch(error => console.log(error))\n}\n\n/**\n * Sends a get request to get information\n * of the user. Returns a promise of the request\n * that resolves to the data of the response.\n * @return {Promise} \n */\nexport const getUserInformation = () => {\n    return new Promise((resolve, reject) => {(axios.get(userInformationEndpoint, getConfig()).then(response => {\n        return resolve(response.data)\n    }).catch(error => console.log(error)))})\n}\n\n/**\n * Sends a post request to a particular room\n * to guess a letter. Returns a promise of the request\n * that resolves to the data of the response.\n * @param {number} game_id\n * @param {string} letter\n * @return {Promise} \n */\nexport const guessHangmanLetter = (game_id, letter) => {\n    return new Promise((resolve, reject) => {axios.post(getGuessLetterEndpoint(game_id), {letter: letter}, getConfig()).then(response => {\n        return resolve(response.data)\n    }).catch(err => console.log(err))})\n}","import React, {useState} from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button, Checkbox} from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\n\nimport { login } from '../endpointUtils'\n\nexport const Error = (props) => {\n  return (\n  <p>{props.errMessage}</p>\n  )\n}\n\nfunction Login(props) {\n\n  const renderRegisterComponent = () => {\n    props.switch()\n}\n    const [ errMessage, setErrMessage ] = useState('')\n\n    const onLogin = (values) => {\n      login(props.history, values.username, values.password).then(\n        error => setErrMessage(error)\n      )\n      }\n\n    return (\n        <div style = {{margin: '100px 40% 100px'}}>\n        <h1>Login to GameHub</h1>\n        <Form\n            name=\"normal_login\"\n            className=\"login-form\"\n            initialValues={{\n                remember: true,\n            }}\n            onFinish={onLogin}\n        >\n      <Form.Item\n        name=\"username\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your Username!',\n          },\n        ]}\n      >\n        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n      </Form.Item>\n      <Form.Item\n        name=\"password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your Password!',\n          },\n        ]}\n      >\n        <Input\n          prefix={<LockOutlined className=\"site-form-item-icon\" />}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n      </Form.Item>\n      <Form.Item>\n        <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\n          <Checkbox>Remember me</Checkbox>\n        </Form.Item>\n      </Form.Item>\n\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n          Log in\n        </Button>\n        Or <a onClick={() => renderRegisterComponent(props.history)}>register now!</a>\n      </Form.Item>\n    </Form>\n    <Error errMessage={errMessage}></Error>\n    </div>\n    )\n}\n\nexport default withRouter(Login)","const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('')\n\n/**\n * Returns LOST if the word_attempt includes\n * an empty string, and returns WON otherwise\n * @param {list of string} word_attempt\n * @return {string} \n */\nexport const outcomeOfHangmanGame = (word_attempt) => {\n    if (word_attempt.includes('')) {\n        return 'LOST'\n    } else {\n        return 'WON'\n    }\n}\n\n/**\n * Formats a game id for display.\n * @param {number} game_id\n * @return {string} \n */\nexport const displayGameID = (game_id) => {\n    return \"Game \" + game_id\n}\n\n/**\n * Formats a word_attempt for display by replacing\n * empty strings with underscores and separating each\n * letter with spacing.\n * @param {list of string} word_attempt\n * @return {string} \n */\nexport const displayWordAttempt = (word_attempt) => {\n    const pre = word_attempt.map(val => {\n      if (val === '')\n        return '_'\n      else\n        return val\n    })\n    return pre.join('   ')\n  }\n\n/**\n * Displays the amount of lives the user has left\n * and their current formatted word_attempt.\n * @param {HangmanGame} hangmanGame\n * @return {string} \n */\nexport const displayHangmanLobbyDescription = (hangmanGame) => {\n    const lives = 6 - hangmanGame.wrong_moves\n    const progress = displayWordAttempt(hangmanGame.word_attempt)\n    return 'Lives Left: ' + lives + ', Progress: ' + progress\n}\n\n/**\n * Displays the word of a HangmanGame.\n * @param {string} word\n * @return {string} \n */\nexport const displayCorrectWord = (word) => {\n    return 'word: ' + word\n}\n\n/**\n * Displays error if word_attempt includes empty string,\n * success otherwise.\n * @param {list of string} word_attempt\n * @return {string} \n */\nexport const displayOutcomeOfHangmanGame = (word_attempt) => {\n    if (word_attempt.includes('')) {\n        return 'error'\n    } else {\n        return 'success'\n    }\n}\n\n/**\n * Displays a win/loss message based on whether\n * the user won.\n * @param {list of string} word_attempt\n * @return {string} \n */\nexport const displayOutcomeMessage = (word_attempt) => {\n    if (word_attempt.includes('')) {\n      return 'You should read a dictionary :('\n    } else {\n      return 'Congratulations...nerd'\n    }\n  }\n\n/**\n * Filters the alphabet for letters that have not been\n * guessed.\n * @param {string} guessedLetters\n * @return {list of string} \n */\nexport const availableLetters = (guessedLetters) => {\n    const li = guessedLetters.split('')\n    return alphabet.filter( ( el ) => !li.includes( el ) );\n}\n\n/**\n * Displays the guessed letters with commas between\n * each letter.\n * @param {list of string} guessed_letters\n * @return {string} \n */\nexport const displayGuessedLetters = (guessed_letters) => {\n    return guessed_letters.split('').join(', ')\n  }","import React, {useState, useEffect} from 'react'\n\nimport {List,Button, Select} from 'antd'\nimport { Error } from './Login'\n\nimport { getUnfinishedHangmanGames, getFinishedHangmanGames,\n        getUsersHangmanPoints, createHangmanGame,\n        deleteHangmanGame } from '../endpointUtils'\nimport { renderHangmanGamePage } from '../renderPageUtils'\nimport { displayCorrectWord, displayGameID,\n        displayHangmanLobbyDescription, outcomeOfHangmanGame } from '../displayUtils'\n\n\nconst { Option } = Select;\n\nfunction HangmanLobby(props) {\n    const [hangmanPoints, setPoints] = useState(0)\n    const [currentGames, setCurrentGames] = useState()\n    const [pastGames, setPastGames] = useState()\n    const [difficultyLevel, setDifficultyLevel] = useState()\n    const [ errMessage, setErrMessage ] = useState('')\n    function onChange(value) {\n        setDifficultyLevel(value)\n      }\n      \n    useEffect(() => {\n        getUnfinishedHangmanGames().then(data => setCurrentGames(data))\n        getFinishedHangmanGames().then(data => setPastGames(data))\n        getUsersHangmanPoints().then(data => setPoints(data))\n    },[])\n\n    const deleteGame = (game_id) => {\n        deleteHangmanGame(game_id)\n        setCurrentGames(currentGames.filter((val) => val.game_id !== game_id))\n    }\n\n    const createGame = () => {\n        if ((difficultyLevel == null) || (difficultyLevel == '')) {\n            setErrMessage('Please select a difficulty level')\n        } else {\n            createHangmanGame(props.history, difficultyLevel)\n        }\n    }\n\n    return (\n        <div>\n            <h1 style = {{textAlign: 'center'}}>Play Hangman</h1>\n            <h3 style= {{textAlign: 'center'}}>{'Points Earned: ' + hangmanPoints}</h3>\n            <div style= {{textAlign: 'center'}}>\n            </div>\n            <h2 style= {{textAlign: 'center'}}>Current Games</h2>\n            <List\n                style = {{\n                    margin: '10px 10% 50px 10%', \n                    padding: '10px', \n                    border: '2px solid grey',\n                    borderRadius:'5px'\n                }}\n                itemLayout = 'horizontal'\n                dataSource = {currentGames}\n                renderItem = {(item) => (\n                    <List.Item\n                    actions={[\n                        <Button onClick={() => renderHangmanGamePage(props.history, item)}>Continue Playing</Button>,\n                        <Button onClick={() => deleteGame(item.game_id)}>Delete Game</Button> \n                ]}\n                    >\n                        <List.Item.Meta\n                            title = {<p>{displayGameID(item.game_id)}</p>}\n                            description = {<p>{displayHangmanLobbyDescription(item)}</p>}\n                        />\n                    </List.Item>\n                )}\n            >\n\n            </List>\n            <div style= {{textAlign: 'center'}}>\n            <Select\n    showSearch\n    style={{ width: 200 }}\n    placeholder=\"Choose Difficulty Level\"\n    optionFilterProp=\"children\"\n    onChange={onChange}\n    filterOption={(input, option) =>\n      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    }\n  >\n        <Option value='1'>1</Option>\n        <Option value='2'>2</Option>\n        <Option value='3'>3</Option>\n  </Select>\n  <Button onClick={createGame}>Start New Singleplayer Game</Button>\n  <p>Multiplayer Functionality Coming Soon!</p>\n  <Error errMessage={errMessage}></Error>\n  </div>\n            <h2 style= {{textAlign: 'center'}}>Past Games</h2>\n            <List\n                style = {{\n                    margin: '10px 10% 50px 10%', \n                    padding: '10px', \n                    border: '2px solid grey',\n                    borderRadius:'5px'\n                }}\n                itemLayout = 'horizontal'\n                dataSource = {pastGames}\n                renderItem = {(item) => (\n                    <List.Item\n                    >\n                        <List.Item.Meta\n                            title = {<p>{displayGameID(item.game_id)}</p>}\n                            description = {<p>{displayCorrectWord(item.word)}</p>}\n                        />\n                        <p>{outcomeOfHangmanGame(item.word_attempt)}</p>\n                    </List.Item>\n                )}\n            >\n            </List>\n        </div>\n    )\n}\nexport default HangmanLobby","import React, {useState} from 'react'\n\nimport { Select, Row, Col, Result, Button } from 'antd';\nimport { Error } from './Login'\n\nimport { guessHangmanLetter } from '../endpointUtils'\nimport { renderHangmanLobbyPage, renderGamesPage } from '../renderPageUtils'\nimport { displayOutcomeOfHangmanGame, displayOutcomeMessage,\n        availableLetters, displayWordAttempt,\n        displayGuessedLetters, } from '../displayUtils'\n\nconst { Option } = Select;\n\nfunction Game(props) {\n    function onChange(value) {\n        setGuess(value)\n      }\n      const [ errMessage, setErrMessage ] = useState('')\n    const [data, setData] = useState(props.location.state.data)\n    const [guess, setGuess] = useState('')\n    let available = availableLetters(data.guessed_letters)\n    const submitGuess = () => {\n      if (guess === '') {\n        setErrMessage('Please select a letter to guess')\n      } else if (data.guessed_letters.split('').includes(guess)) {\n        setErrMessage('Please select a letter you have not guessed')\n      } else {\n      const game_id = props.location.state.data.game_id\n      const letter = guess\n      guessHangmanLetter(game_id, letter).then(data => setData(data))\n      setErrMessage('')\n      }\n    }\n    if (data.finished === 'no') {\n    return (\n        <div>\n            <h1 style = {{textAlign: 'center'}}>{'Game ' + data.game_id}</h1>\n            <div style = {{textAlign: 'center'}}>\n            <Row gutter={16}>\n            <Col className=\"gutter-row\" span={4} offset={8}>\n            <p>{'Guessed Letters: ' + displayGuessedLetters(data.guessed_letters)}</p>\n            </Col>\n            <Col className=\"gutter-row\" span={4}>\n            <h4>{'Lives Left: ' + (6 - data.wrong_moves)}</h4>\n            </Col>\n            </Row>\n            </div>\n            <h1 style = {{textAlign: 'center'}}>{displayWordAttempt(data.word_attempt)}</h1>\n            <div style = {{textAlign: 'center'}}>\n            <Select\n    showSearch\n    style={{ width: 200 }}\n    placeholder=\"Guess a Letter\"\n    optionFilterProp=\"children\"\n    onChange={onChange}\n    filterOption={(input, option) =>\n      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    }\n  >\n    {available.map((val, index) => {\n        return (\n            <Option value={val}>{val}</Option>\n        )\n    })}\n  </Select>\n  <Button onClick={submitGuess}>Submit Guess</Button>\n  <Error errMessage={errMessage}></Error>\n  <div style = {{textAlign: 'center', marginTop: '30px'}}>\n  <Button onClick={() => renderHangmanLobbyPage(props.history)}>Back to Hangman Lobby</Button>\n  </div>\n        </div>\n        </div>\n    )}\n\n    else {\n      return (\n      <Result\n    status={displayOutcomeOfHangmanGame(data.word_attempt)}\n    title={displayOutcomeMessage(data.word_attempt)}\n    subTitle=\"\"\n    extra={[\n      <Button onClick={() => renderHangmanLobbyPage(props.history)} type=\"primary\" key=\"console\">\n        Return To Lobby\n      </Button>,\n      <Button onClick={() => renderGamesPage(props.history)}>\n        Browse Other Games\n      </Button>\n    ]}\n  ></Result>\n      )\n    }\n}\n\nexport default Game","import React from 'react';\n\nfunction Profile() {\n\n    return (\n        <div>\n            <h2 style = {{textAlign: 'center'}}>More Profile Management Functionality Coming Soon!</h2>\n        </div>\n    )\n}\n\nexport default Profile","import React, {useState} from 'react'\nimport { withRouter } from 'react-router-dom';\n\nimport {Form, Input, Button} from 'antd'\nimport { UserOutlined, LockOutlined} from '@ant-design/icons';\n\nimport { register, login } from '../endpointUtils'\n\nimport {Error} from './Login'\n\nfunction Register(props) {\n\n    const renderLoginComponent = () => {\n        props.switch()\n    }\n    const [ errMessage, setErrMessage ] = useState('')\n    const onRegister = (values) => {\n        setErrMessage('loading')\n        const {username, password} = values\n        register(username, password).then((err) => {\n            setErrMessage(err)\n            if (err === '') {\n                setErrMessage('logging you in now')\n                login(props.history, username, password)\n            }\n        }).catch(error => console.log(error))\n    }\n    \n    return (\n        <div style = {{margin: '100px 40% 100px'}}>\n            <h1> Registration </h1>\n            <Form\n            name=\"normal_register\"\n            className=\"register-form\"\n            initialValues={{\n                remember: true,\n            }}\n            onFinish={onRegister}>\n                <Form.Item\n                    name=\"username\"\n                    rules={[\n                    {\n                        required: true,\n                        message: 'A username is required',\n                    },\n                    ]}\n                 >\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Create Username\" />\n                </Form.Item>\n                <Form.Item\n                    name = \"password\"\n                    hasFeedback\n                    rules = {[\n                    {\n                        required: true,\n                        message: 'A password is required'\n                    },\n                    ]}\n                >\n                    <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"Password\" type ='password'/>\n                </Form.Item>\n                <Form.Item\n                    name = \"confirmpassword\"\n                    dependencies = {['password']}\n                    hasFeedback\n                    rules = {[\n                    {\n                        required: true,\n                        message: 'Re-enter your password'\n                    },\n                    ({getFieldValue}) => ({\n                        validator(rule, value) {\n                            if (!value || getFieldValue('password') === value) {\n                                return Promise.resolve()\n                            }\n                            return Promise.reject('Error: Passwords do not match')\n                        }\n                    })\n                    ]}\n                >\n                    <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"Confirm Password\" type ='password'/>\n                </Form.Item>\n                <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\" className=\"register-form-button\">\n                Register\n                </Button>\n                </Form.Item>\n                 Already have an account?<a onClick={renderLoginComponent}> Login</a>\n            </Form>\n            <Error errMessage={errMessage}></Error>\n        </div>\n    )\n}\n\nexport default withRouter(Register)","import React, {useState} from 'react'\n\nimport Login from './Login'\nimport Register from './Register'\n\nfunction Landing(props) {\n\n    const [loginShowing, setLoginShowing] = useState(true)\n\n    const switchView = () => {\n        if (loginShowing === true) {\n            setLoginShowing(false)\n        } else {\n            setLoginShowing(true)\n        }\n    }\n\n    if (loginShowing) {\n        return <Login switch={switchView}></Login>\n    } else {\n        return <Register switch={switchView}></Register>\n    }\n}\n\nexport default Landing","import React, {useState, useEffect} from 'react'\n\nimport {Button, List} from 'antd'\n\nimport { getUserInformation } from '../endpointUtils'\n\nconst data = [{title: 'Hangman', link: '/hangmanLobby'}]\n\nfunction Games(props) {\n    const [username, setUsername] = useState('')\n    const [games, setGames] = useState(data)\n\n    useEffect(() => {\n        getUserInformation().then(data => setUsername(data.username))\n    },[])\n\n    return (\n        <div>\n            <h1 style= {{textAlign: 'center'}}>{'Welcome ' + username}</h1>\n            <h2 style= {{textAlign: 'center'}}>Play some of our games!</h2>\n            <List\n                style = {{\n                    margin: '10px 10% 50px 10%', \n                    padding: '10px', \n                    border: '2px solid grey',\n                    borderRadius:'5px'\n                }}\n                itemLayout = 'horizontal'\n                dataSource = {games}\n                renderItem = {(item) => (\n                    <List.Item\n                    actions={[\n                        <Button onClick={() => props.history.push(item.link)}>Play</Button>, \n                ]}\n                    >\n                        <List.Item.Meta\n                            title = {<h3>{item.title}</h3>}\n                        />\n                    </List.Item>\n                )}\n            >\n\n            </List>\n            <p style= {{textAlign: 'center'}}>More games coming soon!</p>\n        </div>\n    )\n}\n\nexport default Games","import React from 'react';\nimport {Route, Switch} from 'react-router-dom'\nimport { withRouter } from 'react-router-dom';\n\nimport Navbar from './views/Navbar'\nimport HangmanLobby from './views/HangmanLobby'\nimport Game from './views/Game'\nimport Profile from './views/Profile'\nimport Landing from './views/Landing'\nimport Games from './views/Games'\n\nimport { landingRoute, gamesRoute, hangmanLobbyRoute,\n  hangmanGameRoute, profileRoute } from './renderPageUtils'\n\n/**\n * The base component that attaches to index.html.\n * Consists of a navbar and main content that switches\n * between multiple different routes.\n * @param {props} props\n * @return {component} \n */\nfunction App(props) {\n\n  return (\n    <div className=\"App\">\n        <Navbar/>\n      <Switch>\n        <Route exact path = {landingRoute} component = {Landing}/>\n        <Route exact path = {gamesRoute} component = {Games}/>\n        <Route exact path = {hangmanLobbyRoute} component = {HangmanLobby} />\n        <Route exact path = {hangmanGameRoute} component = {Game} />\n        <Route exact path = {profileRoute} component = {Profile} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}